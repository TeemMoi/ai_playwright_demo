{"prompt": "Testaa kirjautuminen onnistuu", "code": "test('login works', async ({ page }) => {\\n  await page.goto('https://example.com/login');\\n  await page.fill('#username', 'user');\\n  await page.fill('#password', 'pass');\\n  await page.click('#login');\\n  await expect(page.locator('text=Tervetuloa')).toBeVisible();\\n});"}
{"prompt": "add product to cart", "code": "test('add to cart from carousel', async ({ page }) => {await page.getByRole('button', { name: 'Buy Now' }).click();await addAndViewCart(page);await expect(page.getByText('Xbox Wireless Controller Lunar Shift Special Edition')).toBeVisible();});"}
{"prompt": "Verify that element is visible", "code": "test('Verify 'Username' input field visibility', async ({page}) => {const loginPage = new LoginPage(page);const usernameInputFieldIsVisible = await loginPage.isUsernameInputFieldVisible();expect(usernameInputFieldIsVisible).toBe(true);})"}
{"prompt": "Check that login fails with wrong credentials", "code": "test('login fails with wrong credentials', async ({ page }) => {\\n  await page.goto('https://example.com/login');\\n  await page.fill('#username', 'wronguser');\\n  await page.fill('#password', 'wrongpass');\\n  await page.click('#login');\\n  await expect(page.locator('text=Invalid credentials')).toBeVisible();\\n});"}
{"prompt": "Register new user account", "code": "test('user registration', async ({ page }) => {\\n  await page.goto('https://example.com/register');\\n  await page.fill('#email', 'newuser@example.com');\\n  await page.fill('#password', 'strongpassword123');\\n  await page.click('#register');\\n  await expect(page.locator('text=Registration successful')).toBeVisible();\\n});"}
{"prompt": "Search for a product and check results", "code": "test('search product', async ({ page }) => {\\n  await page.goto('https://example.com');\\n  await page.fill('#search', 'laptop');\\n  await page.press('#search', 'Enter');\\n  await expect(page.locator('text=Laptop')).toBeVisible();\\n});"}
{"prompt": "Verify user can logout", "code": "test('user logout', async ({ page }) => {\\n  await page.goto('https://example.com/dashboard');\\n  await page.click('#logout');\\n  await expect(page).toHaveURL('https://example.com/login');\\n});"}
{"prompt": "Test password reset flow", "code": "test('password reset', async ({ page }) => {\\n  await page.goto('https://example.com/forgot-password');\\n  await page.fill('#email', 'user@example.com');\\n  await page.click('#reset-password');\\n  await expect(page.locator('text=Password reset email sent')).toBeVisible();\\n});"}
{"prompt": "User logs in and navigates to dashboard", "code": "test('user can log in and access dashboard', async ({ page }) => {\\n  await page.goto('https://example.com/login');\\n  await page.getByRole('textbox', { name: 'Username' }).fill('user1');\\n  await page.getByRole('textbox', { name: 'Password' }).fill('password123');\\n  await page.getByRole('button', { name: 'Login' }).click();\\n  await expect(page.getByRole('heading', { name: 'Dashboard' })).toBeVisible();\\n});"}
{"prompt": "Add product to cart and view cart", "code": "test('user can add a product to cart and view cart', async ({ page }) => {\\n  await page.goto('https://example.com/products');\\n  await page.getByRole('button', { name: 'Add to Cart' }).first().click();\\n  await page.getByRole('link', { name: 'Cart' }).click();\\n  await expect(page.getByRole('heading', { name: 'Your Cart' })).toBeVisible();\\n});"}
{"prompt": "Register new account and see confirmation", "code": "test('user can register a new account and see confirmation', async ({ page }) => {\\n  await page.goto('https://example.com/register');\\n  await page.getByRole('textbox', { name: 'Email' }).fill('newuser@example.com');\\n  await page.getByRole('textbox', { name: 'Username' }).fill('newuser');\\n  await page.getByRole('textbox', { name: 'Password' }).fill('strongpassword');\\n  await page.getByRole('button', { name: 'Register' }).click();\\n  await expect(page.getByText('Thank you for registering!')).toBeVisible();\\n});"}
{"prompt": "Request password reset and verify confirmation", "code": "test('user can request password reset and see confirmation', async ({ page }) => {\\n  await page.goto('https://example.com/forgot-password');\\n  await page.getByRole('textbox', { name: 'Email' }).fill('user@example.com');\\n  await page.getByRole('button', { name: 'Reset Password' }).click();\\n  await expect(page.getByText('Password reset email sent')).toBeVisible();\\n});"}
{"prompt": "Complete checkout process", "code": "test('user can complete a checkout process', async ({ page }) => {\\n  await page.goto('https://example.com');\\n  await page.getByRole('link', { name: 'Products' }).click();\\n  await page.getByRole('button', { name: 'Add to Cart' }).first().click();\\n  await page.getByRole('link', { name: 'Cart' }).click();\\n  await page.getByRole('button', { name: 'Proceed to Checkout' }).click();\\n  await page.getByRole('textbox', { name: 'Address' }).fill('123 Main St');\\n  await page.getByRole('button', { name: 'Confirm Order' }).click();\\n  await expect(page.getByText('Thank you for your purchase!')).toBeVisible();\\n});"}
{"prompt": "Try submitting registration form without filling required fields", "code": "test('user sees error when submitting registration without required fields', async ({ page }) => {\\n  await page.goto('https://example.com/register');\\n  await page.getByRole('button', { name: 'Register' }).click();\\n  await expect(page.getByRole('alert')).toHaveText('Username is required');\\n});"}
{"prompt": "Submit registration form with invalid email format", "code": "test('user sees error when using invalid email format', async ({ page }) => {\\n  await page.goto('https://example.com/register');\\n  await page.getByRole('textbox', { name: 'Email' }).fill('invalid-email');\\n  await page.getByRole('button', { name: 'Register' }).click();\\n  await expect(page.getByRole('alert')).toHaveText('Please enter a valid email address');\\n});"}
{"prompt": "Try registering with a password that is too short", "code": "test('user sees error with too short password during registration', async ({ page }) => {\\n  await page.goto('https://example.com/register');\\n  await page.getByRole('textbox', { name: 'Username' }).fill('user123');\\n  await page.getByRole('textbox', { name: 'Password' }).fill('123');\\n  await page.getByRole('button', { name: 'Register' }).click();\\n  await expect(page.getByRole('alert')).toHaveText('Password must be at least 8 characters');\\n});"}
